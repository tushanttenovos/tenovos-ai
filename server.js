import express from "express";
import fetch from "node-fetch";
import axios from 'axios';
import path from "path";
import { fileURLToPath } from "url";
import cors from "cors";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
app.use(cors());
app.use(express.json({ limit: '25mb' }));

// Serve static frontend
app.use(express.static(path.join(__dirname, "public")));

const config = {
  clientId: '',
  username: '',
  password: '',
  API_KEY: ''
};

const api = {
  AUTH_URL: '',
  UPLOAD_URL: '',
  TENOVOS_AI_URL: '',
  COMPLETE_UPLOAD: ''
};

// Async function to get authorization token
async function getAuthorizationToken() {
  try {
    const response = await axios.post(
      api.AUTH_URL,
      {
        clientId: config.clientId,
        username: config.username,
        password: config.password
      },
      {
        headers: {
          'X-API-KEY': config.API_KEY,
          'Content-Type': 'application/json'
        }
      }
    );
    const authorization = response.data.session.authorization;
    const accessToken = response.data.session.accessToken;
    return {
      authorization,
      accessToken
    };
  } catch (error) {
    throw error;
  }
}

// Proxy endpoint for Nova AI
// Endpoint to generate image from user text
app.post('/generate-image', async (req, res) => {
  const { text } = req.body;
  const { image } = req.body;
  if (!text) return res.status(400).json({ error: 'Text is required' });
  try {
    let payload = {};
    if (image) {
      payload = {
        "imageVariationParams": {
          "images": [image],
          "text": text,
          "similarityStrength": 0.8
        },
        "taskType": "IMAGE_VARIATION",
        "imageGenerationConfig": {
          "cfgScale": 7,
          "seed": 50,
          "width": 1280,
          "height": 720,
          "numberOfImages": 2
        }
      }
    } else {
      payload = {
        "textToImageParams": {
          "text": text
        },
        "taskType": "TEXT_IMAGE",
        "imageGenerationConfig": {
          "cfgScale": 7,
          "seed": 50,
          "width": 1280,
          "height": 720,
          "numberOfImages": 1
        }
      };
    }

    const response = await fetch(api.TENOVOS_AI_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer ' // Add your Bearer token here
      },
      body: JSON.stringify(payload)
    });
    const data = await response.json();
    console.log("generate image",data);
    if (data.images) {
      res.json({ base64: data.images });
    } else {
      res.status(500).json({ error: 'No image generated' });
    }
  } catch (error) {
    res.status(500).json({ error: 'API request failed' });
  }
});

// Endpoint to upload image to Tenovos DAM
app.post('/upload-to-dam', async (req, res) => {

  const { base64Image } = req.body;
  if (!base64Image) return res.status(400).json({ error: 'Image data is required' });

  function getBase64FileSizeInBytes(base64String) {
    const sizeInBytes = (base64String.length * 3) / 4 - (base64String.endsWith('==') ? 2 : base64String
      .endsWith('=') ? 1 : 0);
    return Math.round(sizeInBytes);
  }

  const sizeInBytes = getBase64FileSizeInBytes(base64Image);

  try {
    // Convert base64 to a buffer (adjust if API expects a file upload)
    const imageBuffer = Buffer.from(base64Image, 'base64');

    const tenovosDamBody = {
      "metadataTemplateId": "1b909e8a-a651-4066-8ece-5a4602ea8e20",
      "securityTemplateIds": ["491c6ee6-8760-4ff9-97c5-b8715ac18e1f"],
      "filesize": sizeInBytes,
      "filename": "Tenovos_Content_Creator_AI",
      "metadata": [
        {
          "name": "Lens Id",
          "value": "Tenovos AI"
        },
        {
          "name": "File Name",
          "value": "Tenovos_Content_Creator_AI"
        },
        {
          "name": "Project Link",
          "value": "N/A"
        },
        {
          "name": "Description",
          "value": "Content generated by AI"
        },
        {
          "name": "Language",
          "value": ["English"]
        }
      ]
    }
    const tokens = await getAuthorizationToken();
    // Replace with your actual Tenovos DAM upload API
    const response = await fetch(api.UPLOAD_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        "Authorization": tokens.authorization,
        "AccessToken": tokens.accessToken,
        "X-API-Key": config.API_KEY
      },
      body: JSON.stringify(tenovosDamBody)
    });
    const postData = await response.json();

    if (!response.ok || !postData.data || !postData.data.urls || !postData.data.urls[0].url) {
      console.error('Failed to get upload URL:', postData);
      return res.status(500).json({ error: 'Failed to get upload URL' });
    }
    const uploadUrl = postData.data.urls[0].url;
    const filename = postData.data.filename;
    const fileId = postData.data.fileId;
    const originalFileId = postData.data.originalFileId;
    const uploadId = postData.data.uploadId;
    // Step 2: PUT the image binary to the URL
    const putResponse = await fetch(uploadUrl, {
      method: 'PUT',
      body: imageBuffer, // Send binary data
      headers: {
        'Content-Type': 'image/png', // Adjust MIME type if needed (e.g., image/jpeg)
        'Content-Length': imageBuffer.length.toString()
      }
    });

    if (!putResponse.headers.get('etag') || !putResponse.ok) {
      console.error('Failed to upload the asset to presinged URL:', putResponse);
      return res.status(500).json({ error: 'Failed to upload the asset to presinged URL' });
    }

    const etag = putResponse.headers.get('etag')?.replace(/^"|"$/g, '');
    const payload = {
      "fileId": fileId,
      "filename": filename,
      "filesize": sizeInBytes,
      "action": "complete",
      "originalFileId": originalFileId,
      "uploadId": uploadId,
      "parts": [
        {
          "partNumber": 1,
          "etag": etag
        }
      ]
    }
    // Complete the upload process
    const completeUpload = await fetch(api.COMPLETE_UPLOAD, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        "Authorization": tokens.authorization,
        "AccessToken": tokens.accessToken,
        "X-API-Key": config.API_KEY
      },
      body: JSON.stringify(payload)
    });
    const completeData = await completeUpload.json();
    if (completeUpload.ok) {
      res.json({ success: true, etag: etag });
    } else {
      console.error('Completion failed:', completeData);
      res.status(500).json({ error: 'Completion failed' });
    }
  } catch (error) {
    console.error('Upload error:', error);
    res.status(500).json({ error: 'Upload error' });
  }
});

// Health check
app.get("/health", (req, res) => res.send("âœ… Tenovos AI server running"));

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`ðŸš€ Server running on port ${PORT}`));




